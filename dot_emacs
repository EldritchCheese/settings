;; -*-Lisp-*-

(require 'warnings)
(require 'cl-lib)

(add-to-list 'load-path "~/.emacs.d/misc")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    Package Management         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (>= emacs-major-version 24)
  (require 'package)
  (add-to-list
   'package-archives
   '("melpa" . "http://melpa.org/packages/")
   t)
  (package-initialize))

(defun can-use (package)
  (if (fboundp 'package-install)
    (progn
      (unless (package-installed-p package)
        (package-install package))
      (package-installed-p package))
    nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;         File formats          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Because sometimes the site-start.el is useful, and other times, downright annoying.
(setq magic-mode-alist nil)

(add-to-list 'magic-mode-alist '("#!/usr/bin/env python" . python-mode))
(add-to-list 'auto-mode-alist '("SConstruct" . python-mode))
(add-to-list 'auto-mode-alist '("SConscript" . python-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    Windows settings           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(if (string= system-type "windows-nt")
    (server-start))
(setq w32-pass-lwindow-to-system nil)
(setq w32-lwindow-modifier 'hyper)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Display, coloring, fontsize   ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(can-use 'rainbow-mode)

;;Font size 10 on my laptop, 12 everywhere else.
(defun adjust-font-size ()
  (interactive)
  (if (display-graphic-p)
      (set-face-attribute 'default nil :height
			  (cond ((= (x-display-pixel-height) 1050) 120)
				((= (x-display-pixel-height) 1080) 120)
				((= (x-display-pixel-height) 768) 100)))))
(global-set-key (kbd "C-x g") 'adjust-font-size)
(adjust-font-size)

(setq rst-level-face-base-light 30) ;RST section header is abysmal otherwise

(if (or (string= (getenv "TERM") "xterm-256color")
        (string= (getenv "TERM") "screen-256color")
	(string= system-type "windows-nt"))
    ;;Coloring things assuming that I have 256 colors.
    (progn
      (when (can-use 'color-theme-modern)
        (require 'color-theme-modern)
	(load-theme 'euphoria t t)
	(enable-theme 'euphoria)
        (set-face-foreground 'font-lock-preprocessor-face "light sea green")
        (set-face-foreground 'font-lock-constant-face "light sea green")
        (require 'hl-line)
        (global-hl-line-mode t)
        (set-face-background hl-line-face "gray10")))
  ;;Color options if I only have 8 colors.
  (progn
    (set-face-foreground 'font-lock-comment-face "red")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; General keyboard shortcuts    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(xterm-mouse-mode t) ;Clicks get sent to emacs, not to terminal
(setq kill-whole-line nil) ;Don't kill newline unless line is empty.
(setq transient-mark-mode nil) ;Don't highlight everything when leaving a mark
(setq inhibit-startup-message t) ;It's annoying.
(setq column-number-mode t) ;Show the column number, not just the line number
(put 'narrow-to-region 'disabled nil) ;Enable the C-n-n shortcut
(menu-bar-mode -1) ;Hide the menu bar (Can use with F10)
(tool-bar-mode -1) ;Hide the menu bar (Can use with F10)
(scroll-bar-mode -1) ;Hide the scroll bar
(global-set-key (kbd "<Scroll_Lock>") 'ignore) ;Otherwise, emacs dings whenever I alt-tab in.
(global-set-key (kbd "M-;") 'comment-or-uncomment-region) ;Preferred over comment-dwim
(setq-default tab-width 8)
(setq-default indent-tabs-mode nil)
(setq initial-major-mode 'lisp-mode)
(setq epa-pinentry-mode 'loopback) ; Don't open a new window for gpg password

;; I hate trailing whitespace
;; Stricter version, remove all trailing whitespace
;;(add-hook 'before-save-hook 'delete-trailing-whitespace)
;; Less strict version, only remove trailing ws from modified lines
(when (can-use 'ws-butler) (ws-butler-global-mode))

(setq electric-indent-mode t)
;; I like electric-indent-mode in some places, but I want C-j to always be newline-and-indent.
(global-set-key [remap electric-newline-and-maybe-indent]
                'newline-and-indent)


(require 'dired-x) ; Enables C-x C-j to jump to the current file in dired.
(global-set-key (kbd "C-x F") 'find-name-dired) ; Find all files matching name.

;;M-<up> and M-<down> to scroll up/down by one line.
(global-set-key (kbd "<M-up>") (lambda () (interactive) (scroll-down 1)))
(global-set-key (kbd "<M-down>") (lambda () (interactive) (scroll-up 1)))
(global-set-key (kbd "ESC <up>") (lambda () (interactive) (scroll-down 1))) ;Repeating for emacs in terminal
(global-set-key (kbd "ESC <down>") (lambda () (interactive) (scroll-up 1)))

;;Automatically make script files be executable
(add-hook 'after-save-hook 'executable-make-buffer-file-executable-if-script-p)

;; (when (can-use 'keyfreq)
;;   (require 'keyfreq)
;;   (keyfreq-mode 1)
;;   (keyfreq-autosave-mode 1))

(defun save-in-other-file (new-filename)
  (interactive "FFilename:")
  (write-region (point-min) (point-max) new-filename))
(global-set-key (kbd "C-x C-z") 'save-in-other-file)


;;Change the DISPLAY variable.
(defun correct-display-variable ()
  (interactive)
  (let ((new-display (shell-command-to-string "tmux showenv | grep DISPLAY | cut -d = -f 2")))
    (setenv "DISPLAY" new-display)))

;;Have a . before the backup name to hide it.
(defun make-backup-file-name (filename)
  (expand-file-name
   (concat "." (file-name-nondirectory filename) "~")
   (file-name-directory filename)))

;;Make the directory if it doesn't exist.
(add-hook 'before-save-hook (lambda ()
			      (if (not (file-exists-p default-directory))
				  (make-directory default-directory t))))

;; Helper for compilation. Close the compilation window if there was no error at all.
(defun compilation-exit-autoclose (status code msg)
  (when (and (eq status 'exit) (zerop code))
    (bury-buffer)
    (delete-window (get-buffer-window (get-buffer "*compilation*"))))
  (cons msg code))
(setq compilation-exit-message-function 'compilation-exit-autoclose)
(global-set-key "\C-\M-C" 'compile)

;; Don't search inside build directories.
(eval-after-load 'grep
  '(progn
     (add-to-list 'grep-find-ignored-directories "build")
     (add-to-list 'grep-find-ignored-directories ".build")))

;;C-a goes to start of text, then to start of line
(defun smarter-move-beginning-of-line (arg)
  (interactive "^p")
  (setq arg (or arg 1))
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))
  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))
(global-set-key (kbd "C-a") 'smarter-move-beginning-of-line)

;;Allows for calculations within emacs.
(defun replace-last-sexp ()
  (interactive)
  (let ((value (eval (preceding-sexp))))
    (kill-sexp -1)
    (insert (format "%s" value))))
(global-set-key "\M-E" 'replace-last-sexp)

;;Insert and go to a line before the current line.
(defun line-before ()
  (interactive)
  (previous-line)
  (move-end-of-line 1)
  (newline-and-indent))
(global-set-key (kbd "<M-RET>") 'line-before)

;;Delete both the current buffer, and the file it visits.
(defun kill-buffer-and-file ()
  (interactive)
  (let ((filename (buffer-file-name))
	(buffer (current-buffer))
	(name (buffer-name)))
    (if (not (and filename (file-exists-p filename)))
	(error "Buffer '%s' is not visiting a file." name)
      (when (yes-or-no-p "Are you sure you want to delete this file? ")
	(delete-file filename)
	(kill-buffer buffer)
	(message "File '%s' deleted." filename)))))
(global-set-key (kbd "C-x n k") 'kill-buffer-and-file)

;;Ignore C-z if you are in X11 mode.
(defun suspend-frame-if-tty ()
  (interactive)
  (if (not (display-graphic-p))
      (suspend-frame)))
(global-set-key [remap suspend-frame] 'suspend-frame-if-tty)

;;Ask before exiting a long-lived session
(defun live-time ()
  (let* ((time (assoc 'etime (process-attributes (emacs-pid))))
	 (high (cadr time))
	 (low  (caddr time))
	 (usec (cadddr time)))
    (+ (* high 65536) low (/ usec 1e6))))
(defun old-emacs-query-exit ()
  (interactive)
  (if (or (frame-parameter nil 'client)
          (or (< (live-time) 86400)
              (yes-or-no-p (format "Exit this %d-day-old emacs session? "
                                   (/ (live-time) 86400)))))
      (save-buffers-kill-terminal)))
(global-set-key [remap save-buffers-kill-terminal]
		'old-emacs-query-exit)

(defun just-one-space-with-newline ()
  (interactive)
  (just-one-space -1))
(global-set-key [remap just-one-space]
                'just-one-space-with-newline)

(require 're-builder)
(setq reb-re-syntax 'string)

(global-set-key (kbd "C-x y") 'find-file-other-window)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      hexl customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; http://emacs.stackexchange.com/a/10297/118

(defun buffer-binary-p (&optional buffer)
  "Return whether BUFFER or the current buffer is binary.
A binary buffer is defined as containing at least on null byte.
Returns either nil, or the position of the first null byte."
  (with-current-buffer (or buffer (current-buffer))
    (save-excursion
      (goto-char (point-min))
      (search-forward (string ?\x00) nil t 1))))

(defun hexl-if-binary ()
  "If `hexl-mode' is not already active, and the current buffer
is binary, activate `hexl-mode'."
  (interactive)
  (unless (eq major-mode 'hexl-mode)
    (when (buffer-binary-p)
      (hexl-mode))))

(add-hook 'find-file-hooks 'hexl-if-binary)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      git customizations            ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (when (can-use 'git-gutter)
;;   (require 'git-gutter)
;;   (global-git-gutter-mode +1)
;;   (custom-set-variables
;;    '(git-gutter:hide-gutter t))
;;   (set-face-foreground 'git-gutter:separator "yellow")

;;   (defun conditional-sep ()
;;     (interactive)
;;     (custom-set-variables
;;      (list 'git-gutter:separator-sign (if (display-graphic-p) "" "|"))))
;;   (global-set-key (kbd "C-x |") 'conditional-sep))

(defun git-version ()
  (car (last
        (split-string
         (shell-command-to-string "git --version")))))

;; (unless (version< (git-version) "1.9.4")
;;   (can-use 'magit)
;;   (global-set-key (kbd "C-c C-g") 'magit-status))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    rudel customizations            ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; (when (can-use 'rudel)
;;   (autoload 'rudel-join-session "rudel-loaddefs" "Rudel" t)
;;   (defun rudel-better-join (user color)
;;     (interactive "sUsername: \nsColor: ")
;;     (rudel-join-session (list :encryption nil
;;                               :username user
;;                               :color color
;;                               :global-password nil
;;                               :user-password nil
;;                               :host "bluegill"
;;                               :port 6522
;;                               :protocol-backend (rudel-backend-get 'protocol 'obby)
;;                               :transport-backend (rudel-backend-get 'transport 'tcp)
;;                               )))
;;   (global-set-key (kbd "C-c C-c j") 'rudel-better-join)
;;   (eval-after-load 'rudel '((set-face-attribute 'rudel-author-overlay-face nil
;;                                                 :background nil
;;                                                 :underline "black"))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     ibuffer customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'ibuffer)
(global-set-key "\C-x\C-b" 'ibuffer) ;Open a menu with C-x C-b
(setq ibuffer-show-empty-filter-groups nil)
(setq ibuffer-expert t) ;Don't query before deleting unmodified buffers
(setq ibuffer-saved-filter-groups
      (quote (("default"
	       ("org" (mode . org-mode))
               ("TVM C++" (and (filename . "tvm")
                               (or (mode . c-mode) (mode . c++-mode))))
               ("TVM Python" (and (filename . "tvm")
                                  (mode . python-mode)))
               ("TVM Misc." (filename . "tvm"))
               ("pythoth" (filename . "pythoth"))
               ("screeps" (filename . "screeps"))
               ("ucgretina" (filename . "ucgretina"))
	       ("hermes" (filename . "hermes"))
               ("lua-bindings" (filename . "lua-bindings"))
	       ("Twilight Imperium" (filename . "Twilight.Imperium"))
	       ("omnicolor-images" (filename . "omnicolor-images"))
               ("battle-bots" (filename . "battle-bots"))
	       ("GrROOT" (filename . "GrROOT"))
               ("GRUTinizer" (filename . "GRUTinizer"))
               ("SegaGeant" (filename . "SegaGeant"))
	       ("DDAS" (or
			(filename . "ddas")
			(filename . "DDAS")))
	       ("e12501" (filename . "e12501"))
	       ("pyCharGen" (filename . "pyCharGen"))
	       ("FillMaster" (filename . "FillMaster"))
	       ("Misc. C" (or
			   (mode . c-mode)
			   (mode . c++-mode)))
	       ("Misc. python" (mode . python-mode))
	       ("emacs" (name . "^\\*.*\\*$"))
	       ("dired" (mode . dired-mode))
	       ))))
(add-hook 'ibuffer-mode-hook
	  (lambda () (ibuffer-switch-to-saved-filter-groups "default")))

(defun ibuffer-keys ()
  (local-set-key (kbd "<down-mouse-1>") 'ibuffer-visit-buffer-other-window))
(add-hook 'ibuffer-hook 'ibuffer-keys)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     org-mode customizations        ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(require 'org)
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-log-done t)
(setq org-startup-folded nil)
(setq org-agenda-files (seq-filter 'file-exists-p (list "~/todo.org" "~/TODO.org" "~/org")))
(setq org-agenda-files
      (cl-remove-if-not 'file-exists-p org-agenda-files))
(global-set-key [remap org-beginning-of-line]
                'smarter-move-beginning-of-line)
(set-face-background 'org-agenda-clocking "black")
(set-face-foreground 'org-agenda-clocking "deep sky blue")
(add-to-list 'warning-suppress-types '(undo discard-info))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     yasnippet customizations    ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (can-use 'yasnippet)
  (require 'yasnippet)
  (define-key yas-minor-mode-map (kbd "<tab>") nil)
  (define-key yas-minor-mode-map (kbd "TAB") nil)
  (define-key yas-minor-mode-map (kbd "C-c TAB") 'yas-expand)
  (yas-global-mode 1)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets")))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       makefile customizations       ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun parent-directory (dir)
  (unless (equal "/" dir)
    (file-name-directory (directory-file-name dir))))

(defun find-file-in-hierarchy (current-dir pattern)
  (let ((filelist (directory-files current-dir 'absolute pattern))
        (parent (parent-directory (expand-file-name current-dir))))
    (if (> (length filelist) 0)
        (car filelist)
      (when parent
        (find-file-in-hierarchy parent pattern)))))

(setq compilation-scroll-output 'first-error)

(defun determine-compile-program (filename)
  (cond ((string-match "\\(GNUm\\|M\\|m\\)akefile" filename) "make")
        ((equal filename "SConstruct") "scons")))

(defun find-makefile-compile-impl (clean threads)
  (let ((file (find-file-in-hierarchy (file-name-directory buffer-file-name)
                                      "^\\(\\(GNUm\\|M\\|m\\)akefile$\\)\\|\\(SConstruct$\\)")))
    (when file
      (let* ((directory (file-name-directory file))
             (filename (file-name-nondirectory file))
             (program (determine-compile-program filename))
             (cleanflag (if clean
                            (if (equal program "make") "clean" "-c")
                          "")))
        (compile (format "cd \"%s\" && %s -j%d %s"
                         directory program threads cleanflag))))))

(defun find-makefile-compile (clean)
  (interactive "p")
  (find-makefile-compile-impl (> clean 1) 1))

(defun find-makefile-compile-fast (clean)
  (interactive "p")
  (find-makefile-compile-impl (> clean 1) 8))

(require 'ansi-color)
(defun colorize-compilation-buffer ()
  (toggle-read-only)
  (ansi-color-apply-on-region (point-min) (point-max))
  (toggle-read-only))
(add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

(defun colorize-current-buffer ()
  (interactive)
  (ansi-color-apply-on-region (point-min) (point-max)))

(add-to-list 'auto-mode-alist '("\\.inc\\'" . makefile-gmake-mode))
(eval-after-load 'make-mode
  '(progn
     (define-key makefile-mode-map (kbd "C-c c") 'find-makefile-compile)
     (define-key makefile-mode-map (kbd "C-c C-c") 'find-makefile-compile-fast)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        C++ customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;(when (can-use 'helm)

;; (when (and (can-use 'async)
;;            (can-use 'popup))
;;   (add-to-list 'load-path "~/.emacs.d/helm")


;;   (setq helm-gtags-prefix-key "M-`")
;;   (require 'helm)
;;   (require 'helm-command)
;;   (global-set-key (kbd "M-x") 'helm-M-x)
;;   (helm-mode)
;;   )

(if (can-use 'cuda-mode)
    (progn (add-to-list 'auto-mode-alist '("\\.cu$" . cuda-mode))
           (add-to-list 'auto-mode-alist '("\\.cuh$" . cuda-mode)))
  (progn (add-to-list 'auto-mode-alist '("\\.cu$" . c++-mode))
         (add-to-list 'auto-mode-alist '("\\.cuh$" . c++-mode)))
  )

(global-set-key (kbd "C-c C-g") 'gud-gdb)


(add-hook 'c-initialization-hook '(lambda ()
				    (define-key c-mode-base-map (kbd "C-c C-f") 'ff-find-other-file)
                                    (define-key c-mode-base-map (kbd "C-j") 'newline-and-indent)
                                    (define-key c-mode-base-map (kbd "C-c c") 'find-makefile-compile)
                                    (define-key c-mode-base-map (kbd "C-c C-c") 'find-makefile-compile-fast)))

(setq-default ff-always-in-other-window nil)
(add-to-list 'auto-mode-alist '("\\.h$" . c++-mode))
(setq cc-other-file-alist '(("\\.cc\\'"
                             (".hh" ".h"))
                            ("\\.hh\\'"
                             (".cc" ".C" ".cxx" ".cu"))
                            ("\\.c\\'"
                             (".h"))
                            ("\\.h\\'"
                             (".cxx" ".c" ".cc" ".C" ".CC" ".cpp" ".cu"))
                            ("\\.C\\'"
                             (".H" ".hh" ".h"))
                            ("\\.H\\'"
                             (".C" ".CC"))
                            ("\\.CC\\'"
                             (".HH" ".H" ".hh" ".h"))
                            ("\\.HH\\'"
                             (".CC"))
                            ("\\.c\\+\\+\\'"
                             (".h++" ".hh" ".h"))
                            ("\\.h\\+\\+\\'"
                             (".c++"))

                            ("\\.cu\\'"
                             (".hh" ".h"))
                            ("\\.cuh\\'"
                             (".cu"))
                            ("\\.cpp\\'"
                             (".hpp" ".hh" ".h"))
                            ("\\.hpp\\'"
                             (".cpp"))
                            ("\\.cxx\\'"
                             (".h" ".hxx" ".hh"))
                            ("\\.hxx\\'"
                             (".cxx"))))
(setq cc-search-directories '("." "../src" "../include" "src" "include" "/usr/include"
                              "./*/include" "../include/*" "../include/*/detail"
                               "../../src" "../../include"
                               "../../../src" "../libraries/*"
                               "../../../include" "../libraries/*/*"
                               "../../*/include" "../../*/src" "../*/*/src"
                               ))

(when (can-use 'clang-format+)
  (add-hook 'c-mode-common-hook #'clang-format+-mode))

;; ;;Use Astyle
;; (defvar astyle-options '() "Options to be passed to astyle")
;; (add-to-list 'astyle-options "--style=java")
;; (add-to-list 'astyle-options "--indent=spaces=2")
;; (add-to-list 'astyle-options "--add-brackets")
;; (add-to-list 'astyle-options "--add-one-line-brackets")
;; (add-to-list 'astyle-options "--lineend=linux")
;; (add-to-list 'astyle-options "--pad-header")
;; (add-to-list 'astyle-options "--unpad-paren")

;; (autoload 'apply-rcs-patch "~/.emacs.d/misc/rcs-patch.el")
;; (defun save-buffer-astyle ()
;;   (interactive)
;;   (save-buffer)
;;   (save-window-excursion
;;     (let ((astyle-option-string (mapconcat 'identity astyle-options " ") ))
;;       (shell-command-on-region (point-min) (point-max)
;;                                (format "astyle %s | diff %s - --rcs" astyle-option-string (buffer-file-name))
;;                                (get-buffer-create "*Astyle Diff*") nil
;;                                (get-buffer-create "*Astyle Errors*") t))
;;     (apply-rcs-patch (get-buffer-create "*Astyle Diff*")))
;;   (save-buffer))

;; (defun load-save-buffer-astyle ()
;;   (interactive)
;;   (local-set-key [remap save-buffer] 'save-buffer-astyle)
;;   (message "Loaded astyle"))

;; (add-hook 'c-initialization-hook '(lambda ()
;;                                     (define-key c-mode-base-map (kbd "C-x M-s") 'load-save-buffer-astyle)))


;; For additional places where auto-newlines can be added, look in the help for the variable "c-offsets-alist"
(defconst my-c-style
  '((c-electric-pound-behavior . 'alignleft)

    (c-basic-offset . 2)

    (c-tab-always-indent . t)

    (indent-tabs-mode . nil)

    (c-hanging-braces-alist . ((block-open after)
                               (substatement-open after)
                               (substatement-close)
                               (brace-list-open)
                               (substatement-open)
                               (class-open after)
                               (defun-open after)
                               (defun-close)
                               ))

    (c-hanging-colons-alist . ((member-init-intro before)
                               (inher-intro)
                               (case-label after)
                               (access-label after)
                               (label after)))

    (c-cleanup-list . (scope-operator
                       defun-close-semi
                       brace-else-brace
                       brace-elseif-brace
                       brace-catch-brace))

    (c-offsets-alist . ((arglist-close . c-lineup-arglist)
                        (arglist-intro . +)
                        (arglist-close . 0)
                        (case-label . +)
                        (statement-case-intro . +)
                        ;; (inclass . ++) ; For extra indenting after public:
                        (access-label . -)
                        (label . -)
                        (substatement-open . 0)
                        (innamespace . [0])
                        (block-open . 0)))
    )
  "My C++/C Programming Style")

(defun my-c-mode-common-hook ()
  (c-add-style "My" my-c-style 'set-this-style)
  (c-toggle-auto-newline -1)
  (c-toggle-hungry-state -1))

(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   CMake customizations             ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(can-use 'cmake-mode)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;   PHP/Web customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(autoload 'web-mode "web-mode" "Web Mode" t)
(add-to-list 'auto-mode-alist '("\\.php$" . web-mode))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        Subprocesses                ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;Fill the buffer in the same way as it would be shown in bash
(defun shelllike-filter (proc string)
  (let* ((buffer (process-buffer proc))
	 (window (get-buffer-window buffer)))
    (with-current-buffer buffer
      (if (not (mark)) (push-mark))
      (exchange-point-and-mark) ;Use the mark to represent the location
      (dolist (char (append string nil))
	(cond ((char-equal char ?\r)
	       (move-beginning-of-line 1))
	      ((char-equal char ?\n)
	       (move-end-of-line 1) (newline))
	      (t
	       (if (/= (point) (point-max)) ;Overwrite character
		   (delete-char 1))
	       (insert char))))
      (exchange-point-and-mark))
    (if window
	(with-selected-window window
	  (goto-char (point-max))))))

(defmacro make-subprocess-command (name command &optional user-sentinel)
  (let* ((quoted-name (format "*%s*" name))
	 (sentinel-name (make-symbol (format "%s-automade-sentinel" name))))
    `(progn
       ;;The function to be run
       (defun ,name ()
	 (interactive)
	 (if (get-buffer ,quoted-name)
	     (with-current-buffer ,quoted-name (erase-buffer)))
	 (setq mode-name (propertize mode-name 'face 'font-lock-string-face))
	 (let ((proc (start-process-shell-command (buffer-name) ,quoted-name ,command)))
	   (set-process-filter proc 'shelllike-filter)
	   (set-process-sentinel proc ',sentinel-name)
	   ;; (switch-to-buffer-other-window ,quoted-name)
	   ;; (other-window -1)
	   ))
       ;;The sentinel, run after the process completes, changing the status color of the buffer.
       (defun ,sentinel-name (process event)
	 (let* ((success (string-equal event "finished\n"))
		(mode-line-color (if success 'mode-line-highlight 'font-lock-warning-face))
		(proc-buffer (process-buffer process))
		(proc-window (get-buffer-window proc-buffer))
		(file-buffer (get-buffer (format "%s" process))))
	   (with-current-buffer file-buffer
	     (setq mode-name (propertize mode-name 'face mode-line-color)))
	   ;; (if success (progn
	   ;;    (bury-buffer proc-buffer)
	   ;;    (if proc-window (delete-window proc-window))))
	   (unless success
	     (switch-to-buffer-other-window ,quoted-name))
	   )
	 ,(if user-sentinel `(,user-sentinel process event))))))

(make-subprocess-command execute-current-buffer (buffer-file-name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      Python customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(eval-after-load 'python
  '(define-key python-mode-map (kbd "C-c C-c") 'execute-current-buffer))

;; electric-indent-mode does the complete wrong thing in many cases in python
;; When typing a colon, it re-indents the current line,
;;   even if I have already set the desired indentation.
(add-hook 'python-mode-hook '(lambda ()
   (electric-indent-local-mode -1)))

(when (can-use 'blacken)
  (add-hook 'python-mode-hook '(lambda () (blacken-mode))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;       LaTeX customizations         ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(can-use 'auctex)

;; Filenames ending in .inc are opened as LaTeX files
;;(add-to-list 'auto-mode-alist '("\\.inc\\'" . latex-mode))

;; Why would I want indent-newline-and-indent instead of the standard?
(defun my-newline-and-indent ()
  (interactive)
  (newline)
  (funcall indent-line-function))

(add-hook 'LaTeX-mode-hook '(lambda ()
  (local-set-key (kbd "C-j") 'my-newline-and-indent)
  (local-set-key (kbd "C-c c") 'find-makefile-compile)
  (local-set-key (kbd "C-c C-c") 'find-makefile-compile-fast)
  (TeX-fold-mode 1)
  (auto-fill-mode 1)
  (electric-indent-local-mode nil)))

;; ;; Automatically compile to pdf whenever saving.
;; (make-subprocess-command latex-compile "scons -u")
;; (add-hook 'LaTeX-mode-hook '(lambda ()
;; 			      (add-hook 'after-save-hook 'latex-compile nil 'make-it-local)))

;; Don't autocomplete to the intermediate files.
(setq completion-ignored-extensions
      (append completion-ignored-extensions
	      '(".aux" ".fls" ".out" ".pdf" ".toc")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      PoV-Ray customizations      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (can-use 'pov-mode)
  (autoload 'pov-mode "pov-mode" "PoV-Ray scene file" t)
  (add-to-list 'auto-mode-alist '("\\.pov\\'" . pov-mode))


  ;; ;;Display the image in another window.
  ;; (defun povray-render-sentinel (process event)
  ;;   (let* ((success (string-equal event "finished\n"))
  ;;          (povfile-buffer (get-buffer (format "%s" process)))
  ;;          (povfile-window (get-buffer-window povfile-buffer))
  ;;          (png-filename (replace-regexp-in-string "\.pov$" "\.png" (buffer-file-name povfile-buffer)))
  ;;          (png-buffer (get-file-buffer png-filename)))
  ;;     (if success	(progn
  ;;                         (if (display-graphic-p) (progn
  ;;                                                   (if png-buffer (kill-buffer png-buffer))
  ;;                                                   (find-file-other-window png-filename)
  ;;                                                   (other-window -1)))))))

  ;;Render the current povray file
  (make-subprocess-command povray-render
                           (format "povray_build.py %s" (buffer-name)))

  ;; ;;Render the current povray file
  ;; (make-subprocess-command povray-render
  ;;                          (format "scons -u %s" (replace-regexp-in-string "\.pov$" "\.png" (buffer-name)))
  ;;                          povray-render-sentinel)
  (eval-after-load 'pov-mode
    '(progn
       (dolist (key '("C-c C-c 1" "C-c C-c 2" "C-c C-c 3" "C-c C-c 4" "C-c C-c 5"
                      "C-c C-c c" "C-c C-c e" "C-c C-c h" "C-c C-c i"
                      "C-c C-c l" "C-c C-c r" "C-c C-c v"))
         (define-key pov-mode-map (kbd key) nil))
       (define-key pov-mode-map (kbd "C-c C-c") 'povray-render))))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;      golang  customizations      ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(add-hook 'go-mode-hook
   (lambda ()
     (when (can-use 'go-mode)
       (autoload 'go-mode "go-mode" "Go editing mode." t)
       (add-to-list 'auto-mode-alist '("\\.go$" . go-mode))
       (add-hook 'before-save-hook 'gofmt-before-save)
       (setq tab-width 2)
       (setq indent-tabs-mode 1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        lua customizations           ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (can-use 'lua-mode)
  (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
  (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
  (add-to-list 'interpreter-mode-alist '("lua" . lua-mode)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;        rust customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(when (can-use 'rust-mode)
  (autoload 'rust-mode "rust-mode" "Rust editing mode." t)
  (add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode)))

(defun rust-compile-all ()
  "Compile using `cargo build`"
  (interactive)
  (rust--compile "%s build --all-targets" rust-cargo-bin))

(eval-after-load 'rust-mode
  `(progn
     (define-key rust-mode-map (kbd "C-c C-c") 'rust-compile-all)
     (define-key rust-mode-map (kbd "C-c C-r") 'rust-run)
     (define-key rust-mode-map (kbd "C-c C-t") 'rust-test)
     (setq rust-format-on-save t)))

;; Setup for jump to definition and autocomplete.  Needs installation
;; of racer and rust source to work.
;; $ cargo +nightly install racer
;; $ rustup add component rust-src
(when (can-use 'racer)
  (eval-after-load 'rust-mode
    `(progn
       ;; Use newer path for rust source.  Needed as of 2021-02-28.
       ;; Should test if this can be removed in the future.
       (setq racer-rust-src-path
             (concat (string-trim (shell-command-to-string "rustc --print sysroot"))
                     "/lib/rustlib/src/rust/library"))
       (add-hook 'rust-mode-hook #'racer-mode)
       (add-hook 'racer-mode-hook #'eldoc-mode)))
  (when (can-use 'company)
    (eval-after-load 'rust-mode
      `(progn
         (add-hook 'racer-mode-hook #'company-mode)
         (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
         (setq company-tooltip-align-annotations t)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;     screeps customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(make-subprocess-command upload-screeps-code "~/screeps/upload.py")

(eval-after-load 'javascript-mode
  `(define-key js-mode-map (kbd "C-c C-c") 'upload-screeps-code))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;         tvm customizations          ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; sudo apt install clangd                              # Add C++ language server
;; sudo pip3 install jedi-language-server "jedi<0.18.0" # Add python language server
;; sudo pip3 install ffi-navigator                      # Add TVM-specific langage server

;; For clangd support, add to config.cmake
;; # Enable generation of compile_commands.json for clangd
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
;; # Also needed for cmake<3.18.0 (https://gitlab.kitware.com/cmake/cmake/-/issues/16588)
;; set(CMAKE_EXPORT_COMPILE_COMMANDS ON CACHE INTERNAL "")
;; Then, cd $TVM_HOME && ln -s build/compile_commands.json .

(when (can-use 'lsp-mode)
  (setq lsp-keymap-prefix "C-c C-d")
  (require 'lsp-mode)

  (setq lsp-headerline-breadcrumb-enable nil)
  (setq lsp-eldoc-enable-hover nil)

  (add-hook 'python-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)

  (when (can-use 'lsp-jedi)
    (require 'lsp-jedi))

  ;; TODO: Run the check for ffi-navigator asynchronously
  (when (= 0 (call-process-shell-command "pip3 list | grep ffi-navigator" nil nil nil))
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-stdio-connection '("python3" "-m" "ffi_navigator.langserver"))
      :major-modes '(python-mode c++-mode)
      :server-id 'ffi-navigator
      :add-on? t))
    )
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;    end of human-written section     ;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; TODO: Maybe use https://stackoverflow.com/a/5058752 to move
;; customize's variables into a separate file that is ignored.
